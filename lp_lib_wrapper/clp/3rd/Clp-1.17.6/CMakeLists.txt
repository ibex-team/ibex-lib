cmake_minimum_required (VERSION 3.5.1)

set (CLP_MAJOR_VERSION 1)
set (CLP_MINOR_VERSION 17)
set (CLP_MICRO_VERSION 6)
set (CLP_VERSION "${CLP_MAJOR_VERSION}.${CLP_MINOR_VERSION}.${CLP_MICRO_VERSION}")
project (CLP VERSION ${CLP_VERSION} LANGUAGES C CXX)

set (PACKAGE_NAME Clp)
set (PACKAGE clp)
set (PACKAGE_BUGREPORT "clp@list.coin-or.org")
set (PACKAGE_STRING "${PACKAGE_NAME} ${CLP_VERSION}")
set (PACKAGE_TARNAME ${PACKAGE})
set (PACKAGE_VERSION ${CLP_VERSION})
set (VERSION ${CLP_VERSION})

message (STATUS "Running on system ${CMAKE_HOST_SYSTEM} with processor ${CMAKE_HOST_SYSTEM_PROCESSOR}")
if (CMAKE_CROSSCOMPILING)
  message (STATUS "Targeting system ${CMAKE_SYSTEM} with processor ${CMAKE_SYSTEM_PROCESSOR}")
endif ()

#Â options and command-line arguments
option (BUILD_SHARED_LIBS "Set to ON to build shared libraries" OFF)
set (CMAKE_INSTALL_INCLUDEDIR "include" CACHE PATH "C++ header files (include)")
set (CMAKE_INSTALL_LIBDIR "lib" CACHE PATH "object code libraries (lib)")

# Looking for headers
option (STDC_HEADERS "Set to OFF if you do not have standard headers" ON)
include (CheckIncludeFiles)
foreach (name "dlfcn" "endian.h" "float" "ieeefp" "inttypes" "math" "memory"
              "stdint" "stdlib" "strings" "string" "sys/stat"
              "sys/types" "unistd" "windows.h")
  string (TOUPPER "${name}" uppername)
  string (REPLACE "/" "_" uppername "${uppername}")
  set (header "${name}.h")
  set (var "HAVE_${uppername}_H")
  check_include_files ("${header}" "${var}")
endforeach ()

include (CheckIncludeFileCXX)
foreach (name "cfloat" "cieeefp" "cinttypes" "cmath" "cstdint")
  string (TOUPPER "${name}" uppername)
  set (header "${name}")
  set (var "HAVE_${uppername}")
  check_include_file_cxx ("${header}" "${var}")
endforeach ()

# Size of types
include (CheckTypeSize)
check_type_size ("int64_t" SIZEOF_INT64_T)
check_type_size ("long long" SIZEOF_LONG_LONG)
check_type_size ("long" SIZEOF_LONG)
check_type_size ("uint64_t" SIZEOF_UINT64_T)
check_type_size ("unsigned long long" SIZEOF_ULONG_LONG)
check_type_size ("unsigned long" SIZEOF_ULONG)
check_type_size ("intptr_t" SIZEOF_INTPTR_T)
check_type_size ("int *" SIZEOF_INT_P)
#check_type_size ("int" SIZEOF_INT)

if (SIZEOF_INT64_T EQUAL "8")
  set (COIN_INT64_T "int64_t")
elseif (SIZEOF_LONG EQUAL "8")
  set (COIN_INT64_T "long")
elseif (SIZEOF_LONG_LONG EQUAL "8")
  set (COIN_INT64_T "long long")
else ()
  message (FATAL_ERROR "Can't find suitable int64_t")
endif ()

if (SIZEOF_UINT64_T EQUAL "8")
  set (COIN_UINT64_T "uint64_t")
elseif (SIZEOF_ULONG EQUAL "8")
  set (COIN_INT64_T "unsigned long")
elseif (SIZEOF_ULONG_LONG EQUAL "8")
  set (COIN_INT64_T "unsigned long long")
else ()
  message(FATAL_ERROR "Can't find suitable uint64_t")
endif ()

if (SIZEOF_INTPTR_T)
  set (COIN_INTPTR_T "intptr_t")
elseif (SIZEOF_INT_P)
  set (COIN_INTPTR_T "int *")
else ()
  message (FATAL_ERROR "Can't find suitable intptr_t")
endif ()

add_subdirectory (CoinUtils)
add_subdirectory (Clp)
