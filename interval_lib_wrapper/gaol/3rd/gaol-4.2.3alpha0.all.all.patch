--- gaol-4.2.3alpha0/gaol/gaol_common.cpp	2022-02-01 12:40:40.000000000 +0100
+++ gaol-4.2.3alpha0/gaol/gaol_common.cpp	2025-03-09 12:59:58.483700407 +0100
@@ -29,7 +29,7 @@
 
 #include <iostream>
 #include <cstdio>
-#include <cmath>
+#include <cmath>
 #include "gaol/gaol_config.h"
 #include "gaol/gaol_fpu.h"
 #include "gaol/gaol_common.h"
@@ -75,7 +75,10 @@
             save_fpu_state_crlibm = ::crlibm_init();
 #endif
 #if !GAOL_PRESERVE_ROUNDING
-            reset_fpu_cw(GAOL_FPU_MASK); // 53 bits precision, all exceptions masked, rounding to +oo
+	fesetenv(FE_DFL_ENV);
+	round_upward();
+	// next instruction crashes on MacOS ARM64 platform
+	//reset_fpu_cw(GAOL_FPU_MASK); // 53 bits precision, all exceptions masked, rounding to +oo
 #   if USING_SSE2_INSTRUCTIONS
             round_upward_sse();
 #   endif
--- gaol-4.2.3alpha0/gaol/gaol_double_op_apmathlib.h	2022-02-01 12:40:40.000000000 +0100
+++ gaol-4.2.3alpha0/gaol/gaol_double_op_apmathlib.h	2025-03-08 00:37:50.585568767 +0100
@@ -112,7 +112,7 @@
     	for (;;) {
       	if (odd(n)) {
 				n >>= 1;
-				y = opposite(opposite(y)*z);
+				y = gaol_opposite(gaol_opposite(y)*z);
 				if (n == 0) {
 	  				GAOL_RND_LEAVE();
 	  				return y;
@@ -120,7 +120,7 @@
       	} else {
 				n>>=1;
       	}
-      	z = opposite(opposite(z)*z);
+      	z = gaol_opposite(gaol_opposite(z)*z);
     	}
 	}
 
@@ -134,9 +134,9 @@
 	return ipow_dn(d,e);
       } else { // d < 0
 	if (even(e)) {
-	  return ipow_dn(opposite(d),e);
+	  return ipow_dn(gaol_opposite(d),e);
 	} else { // odd(e)
-	  return opposite(ipow_up(opposite(d),e));
+	  return gaol_opposite(ipow_up(gaol_opposite(d),e));
 	}
       }
     }
@@ -151,9 +151,9 @@
 	return ipow_up(d,e);
       } else { // d < 0
 	if (even(e)) {
-	  return ipow_up(opposite(d),e);
+	  return ipow_up(gaol_opposite(d),e);
 	} else { // odd(e)
-	  return opposite(ipow_dn(opposite(d),e));
+	  return gaol_opposite(ipow_dn(gaol_opposite(d),e));
 	}
       }
     }
--- gaol-4.2.3alpha0/gaol/gaol_double_op_crlibm.h	2022-02-01 12:40:40.000000000 +0100
+++ gaol-4.2.3alpha0/gaol/gaol_double_op_crlibm.h	2025-03-08 00:38:06.848553397 +0100
@@ -88,7 +88,7 @@
     	for (;;) {
       	if (odd(n)) {
 			n >>= 1;
-			y = opposite(opposite(y)*z);
+			y = gaol_opposite(gaol_opposite(y)*z);
 			if (n == 0) {
 	  			GAOL_RND_LEAVE();
 	  			return y;
@@ -96,7 +96,7 @@
       	} else {
 			n>>=1;
       	}
-      	z = opposite(opposite(z)*z);
+      	z = gaol_opposite(gaol_opposite(z)*z);
     	}
 	}
 
@@ -110,9 +110,9 @@
 	return ipow_dn(d,e);
       } else { // d < 0
 	if (even(e)) {
-	  return ipow_dn(opposite(d),e);
+	  return ipow_dn(gaol_opposite(d),e);
 	} else { // odd(e)
-	  return opposite(ipow_up(opposite(d),e));
+	  return gaol_opposite(ipow_up(gaol_opposite(d),e));
 	}
       }
     }
@@ -127,9 +127,9 @@
 	return ipow_up(d,e);
       } else { // d < 0
 	if (even(e)) {
-	  return ipow_up(opposite(d),e);
+	  return ipow_up(gaol_opposite(d),e);
 	} else { // odd(e)
-	  return opposite(ipow_dn(opposite(d),e));
+	  return gaol_opposite(ipow_dn(gaol_opposite(d),e));
 	}
       }
     }
--- gaol-4.2.3alpha0/gaol/gaol_double_op_m.h	2022-02-01 12:40:40.000000000 +0100
+++ gaol-4.2.3alpha0/gaol/gaol_double_op_m.h	2025-03-08 00:38:17.143543648 +0100
@@ -115,7 +115,7 @@
     	for (;;) {
       	if (odd(n)) {
 				n >>= 1;
-				y = opposite(opposite(y)*z);
+				y = gaol_opposite(gaol_opposite(y)*z);
 				if (n == 0) {
 	  				GAOL_RND_LEAVE();
 	  				return y;
@@ -123,7 +123,7 @@
       	} else {
 				n>>=1;
       	}
-      	z = opposite(opposite(z)*z);
+      	z = gaol_opposite(gaol_opposite(z)*z);
     	}
 	}
 
@@ -137,9 +137,9 @@
 	return ipow_dn(d,e);
       } else { // d < 0
 	if (even(e)) {
-	  return ipow_dn(opposite(d),e);
+	  return ipow_dn(gaol_opposite(d),e);
 	} else { // odd(e)
-	  return opposite(ipow_up(opposite(d),e));
+	  return gaol_opposite(ipow_up(gaol_opposite(d),e));
 	}
       }
     }
@@ -154,9 +154,9 @@
 	return ipow_up(d,e);
       } else { // d < 0
 	if (even(e)) {
-	  return ipow_up(opposite(d),e);
+	  return ipow_up(gaol_opposite(d),e);
 	} else { // odd(e)
-	  return opposite(ipow_dn(opposite(d),e));
+	  return gaol_opposite(ipow_dn(gaol_opposite(d),e));
 	}
       }
     }
--- gaol-4.2.3alpha0/gaol/gaol_interval.cpp	2022-02-01 12:40:40.000000000 +0100
+++ gaol-4.2.3alpha0/gaol/gaol_interval.cpp	2025-03-09 10:32:42.047131593 +0100
@@ -243,7 +243,8 @@
   {
     //    double l = ((I.left()==0.0) ? 0.0  : I.left()); // Avoids printing -0
     //    double r = ((I.right()==0.0) ? 0.0 : I.right());  // Avoids printing -0
-    GAOL_RND_ENTER();
+    GAOL_RND_PRESERVE();
+	round_upward();
 
     double l = I.left(), r = I.right();
 
@@ -366,7 +367,7 @@
 				}
       }
     }
-    GAOL_RND_LEAVE();
+    GAOL_RND_RESTORE();
     return os;
   }
 
@@ -1105,7 +1106,7 @@
   }
 
 
-  interval::operator string() const
+  interval::operator std::string() const
   {
     std::ostringstream output;
     output.precision(interval::precision());
@@ -1143,12 +1144,13 @@
       return std::numeric_limits<double>::max();
     }
 
-    unsigned short int _save_state=get_fpu_cw(); round_nearest();
+    GAOL_RND_PRESERVE();
+    round_nearest();
     double middle = 0.5*(left()+right());
 	 if (std::isinf(middle)) {
 		middle = 0.5*left() + 0.5*right();
 	 }
-    GAOL_RND_LEAVE();
+    GAOL_RND_RESTORE();
     return middle;
   }
 
--- gaol-4.2.3alpha0/gaol/gaol_port.h	2022-02-08 14:33:29.000000000 +0100
+++ gaol-4.2.3alpha0/gaol/gaol_port.h	2025-03-08 00:40:24.629422564 +0100
@@ -89,9 +89,9 @@
 
 #if HAVE_ROUNDING_MATH_OPTION
   INLINE double f_negate_simple(double x) { return -x; }
-#  define opposite(x) f_negate_simple(x)
+#  define gaol_opposite(x) f_negate_simple(x)
 #else
-#  define opposite(x) f_negate(x)
+#  define gaol_opposite(x) f_negate(x)
 #endif // HAVE_ROUNDING_MATH_OPTION
 
   /*!
@@ -145,8 +145,7 @@
 #endif
 
 #ifndef GAOL_NAN
-  static uintdouble NaN_val = {{IFBIGENDIAN(0x7ff80000, 0x0)}};
-#define GAOL_NAN (gaol::NaN_val.d)
+#define GAOL_NAN (((uintdouble) {{IFBIGENDIAN(0x7ff80000, 0x0)}}).d)
 #endif
 
   // #define GAOL_INFINITY std::numeric_limits<double>::infinity()
