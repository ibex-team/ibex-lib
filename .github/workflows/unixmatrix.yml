on:
    push:
        branches: '**'
#        branches: 'master'
        tags: '' # Restrict to blank tags
    pull_request:

jobs:
 # This job may be commented if a new release should not be created...
 deploy:
    runs-on: ubuntu-latest
    steps: 
    - uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        draft: true
        tag_name: autotagname-${{ github.sha }}
        release_name: autotagname-${{ github.sha }}
      if: github.event_name != 'pull_request'

 unixmatrix:
    runs-on: ${{ matrix.cfg.os }}
    defaults:
        run:
            shell: ${{ matrix.cfg.shell }}
    strategy:
        matrix:
            cfg:
            - { os: windows-2019, shell: cmd, arch: x64, runtime: vc16, cmake_params: '-G "Visual Studio 16" -A x64', cmake_flags: ' /wd4267 /wd4244 /wd4305 /wd4996', cmake_config: '--config Release', test_config: 'Release/', desc: 'Windows Visual Studio 2019 x64' }
            - { os: windows-2019, shell: cmd, arch: x64, runtime: mingw8, cmake_params: '-G "MSYS Makefiles"', cmake_flags: '-fPIC', desc: 'Windows MinGW 8.1.0 x64' }
            - { os: windows-2019, shell: cmd, arch: x86, runtime: mingw8, cmake_params: '-G "MSYS Makefiles"', cmake_flags: '-fPIC', choco_flags: '--x86', desc: 'Windows MinGW 8.1.0 x86' }
            - { os: ubuntu-20.04, shell: bash, arch: amd64, runtime: focal, cmake_flags: '-fPIC', desc: 'Ubuntu 20.04' }
            - { os: ubuntu-18.04, shell: bash, arch: amd64, runtime: bionic, cmake_flags: '-fPIC', desc: 'Ubuntu 18.04' }
            - { os: macos-11, shell: bash, arch: amd64, runtime: bigsur, cmake_flags: '-fPIC', desc: 'macOS Big Sur' }
            - { os: macos-10.15, shell: bash, arch: amd64, runtime: catalina, cmake_flags: '-fPIC', desc: 'macOS Catalina' }
    name: ${{ matrix.cfg.desc }}
    steps: 
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0
        clean: false
      # From https://github.com/Munkei/VersionFromGit.cmake/blob/master/VersionFromGit.cmake
    - run: echo "git_tag=`git describe --tags --abbrev=0`" >> $GITHUB_ENV
      shell: bash
      # See https://askubuntu.com/questions/620533/what-is-the-meaning-of-the-xubuntuy-string-in-ubuntu-package-names
    - run: |
        echo "SOFTWARE_VERSION=${git_tag:5}" >> $GITHUB_ENV
        echo "DEBIAN_PACKAGE_REV=0" >> $GITHUB_ENV
        echo "PACKAGE_REV=0" >> $GITHUB_ENV
        echo "CHOCO_PACKAGE_REV=" >> $GITHUB_ENV
        echo "VERBOSE=1" >> $GITHUB_ENV
      shell: bash
    - run: if [ -z "$CHOCO_PACKAGE_REV" ]; then echo "PACKAGE_VERSION=$SOFTWARE_VERSION" >> $GITHUB_ENV ; else echo "PACKAGE_VERSION=$SOFTWARE_VERSION.$CHOCO_PACKAGE_REV" >> $GITHUB_ENV ; fi
      shell: bash
      if: runner.os=='Windows'
    - run: echo "PACKAGE_VERSION=$SOFTWARE_VERSION-${DEBIAN_PACKAGE_REV}${{ matrix.cfg.runtime }}$PACKAGE_REV" >> $GITHUB_ENV
      shell: bash
      if: runner.os=='Linux'
    - run: |
        choco install -y -r --no-progress mingw --version=8.1.0 --force ${{ matrix.cfg.choco_flags }}
        echo C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw32\bin>>%GITHUB_PATH%
      if: (runner.os=='Windows')&&(matrix.cfg.runtime=='mingw8')&&(matrix.cfg.arch=='x86')
    - run: choco install -y -r --no-progress checksum wget winflexbison make patch zip ${{ matrix.cfg.choco_flags }}
      if: runner.os=='Windows'
    - run: sudo apt-get -q update ; sudo apt-get -y install flex bison dpkg-dev || true
      if: runner.os=='Linux'
    - run: |
        mkdir build ; cd build
        cmake -E env CXXFLAGS="${{ matrix.cfg.cmake_flags }}" CFLAGS="${{ matrix.cfg.cmake_flags }}" cmake ${{ matrix.cfg.cmake_params }} -D CMAKE_INSTALL_PREFIX=../ibex ..
        cmake --build . ${{ matrix.cfg.cmake_config }} --target install
        cd ..
      shell: bash
    - run: |
        cd packages/choco
        cp -Rf ../../ibex/* ibex
        sed_param=s/\<version\>2\<\\/version\>/\<version\>${PACKAGE_VERSION}\<\\/version\>/
        sed -i "$sed_param" ibex/ibex.nuspec
        mv -f ibex ibex.$PACKAGE_VERSION
        cd ibex.$PACKAGE_VERSION
        choco pack
        mv -f ibex.$PACKAGE_VERSION.nupkg ../../../
        cd ../../..
        checksum -f=ibex.$PACKAGE_VERSION.nupkg -t=sha256
        choco source add -n=current-directory -s . --priority=100
        choco install -y -r --no-progress ibex
        mv -f ibex.$PACKAGE_VERSION.nupkg ibex.$PACKAGE_VERSION${{ matrix.cfg.choco_flags }}.nupkg
      shell: bash
      if: (runner.os=='Windows')&&(matrix.cfg.runtime=='mingw8')
    - run: |
        cd packages
        chmod +x ./genlibibex-dev.sh
        ./genlibibex-dev.sh ubuntu ${{ matrix.cfg.runtime }} ${{ matrix.cfg.arch }} $SOFTWARE_VERSION $DEBIAN_PACKAGE_REV $PACKAGE_REV
        cd ..
        sudo dpkg -i libibex-dev-$PACKAGE_VERSION\_${{ matrix.cfg.arch }}.deb
      shell: bash
      if: runner.os=='Linux'
    - run: |
        rm -Rf ibex
        cd tests/test_ibex
        cmake ${{ matrix.cfg.cmake_params }} .
        cmake --build . ${{ matrix.cfg.cmake_config }}
        ./${{ matrix.cfg.test_config }}my_project
      shell: bash
      if: ((runner.os=='Windows')&&(matrix.cfg.runtime=='mingw8'))||(runner.os=='Linux')
    - run: |
        cd tests/test_ibex
        cmake ${{ matrix.cfg.cmake_params }} -D CMAKE_PREFIX_PATH="../../ibex" .
        cmake --build . ${{ matrix.cfg.cmake_config }}
        ./${{ matrix.cfg.test_config }}my_project
      shell: bash
      if: ((runner.os!='Windows')||(matrix.cfg.runtime!='mingw8'))&&(runner.os!='Linux')
    - uses: xresloader/upload-to-github-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: "*.nupkg;*.deb"
        overwrite: true
        tag_name: autotagname-${{ github.sha }}
      if: (github.event_name != 'pull_request')&&(((runner.os=='Windows')&&(matrix.cfg.runtime=='mingw8'))||(runner.os=='Linux'))
