//============================================================================
//                                  I B E X                                   
// File        : ibex_SystemExtend.cpp_
// Author      : Gilles Chabert
// Copyright   : Ecole des Mines de Nantes (France)
// License     : See the LICENSE file
// Created     : May 27, 2013
// Last Update : May 27, 2013
//============================================================================

#include "ibex_SystemFactory.h"
#include "ibex_ExprCopy.h"

using std::pair;

namespace ibex {

namespace {

class SystemExtend : public SystemFactory {

public:

	SystemExtend(const System& sys, double eps) {


		Variable y(ExtendedSystem::goal_name()); // y is a scalar
		// warning: y must be added at the end (goal_var is set to n in constructor)
		// We set goal_var to n (<=>y variable is the nth variable)
		// to simplify the copy of expressions (see ibex_ExprCopy).

		//		Array<const ExprSymbol> sys.args(sys.args.size()+1);
		//		varcopy(sys.args,sys.args);
		//		sys.args.set_ref(sys.args.size(),y);

		// do not initialize variables with sys.f.args
		// since f may be uninitialized (unconstrained problem)
		add_var(sys.args,sys.box);
		add_var(y,IntervalVector(1,sys.goal->eval(sys.box)));

		// first, add goal(x)<=y.
		if (sys.goal)  {
			// warning: needs to be f(x)-y=0 and not y-f(x)=0
			// because XNewton replaces the "=" sign by "<=".
			const ExprNode& goal_expr=ExprCopy().copy(sys.goal->args(), sys.args, sys.goal->expr())-y;
			add_ctr(ExprCtr(goal_expr,EQ));
			cleanup(goal_expr, false);

			const ExprNode& tmp=y;
			add_goal(tmp);
		}


		// TODO: factorize code with SystemNormalize
		// note: sys.ctrs.size()<>sys.nb_ctr in general but
		// with EXTEND, they actually match (only scalar constraints).
		for (int i=0; i<sys.ctrs.size(); i++) {

			if (sys.ctrs[i].op==EQ) {
				pair<const ExprNode*, const Interval*> p=sys.ctrs[i].is_thick_equality();
				const ExprNode *f_1;
				const ExprNode *f_2;
				if (p.first!=NULL) {
					f_1=&( ExprCopy().copy(sys.ctrs[i].f.args(), sys.args, *p.first) - p.second->ub());
					f_2=&(-ExprCopy().copy(sys.ctrs[i].f.args(), sys.args, *p.first) - (-p.second->lb()));
				} else {
					f_1=&( ExprCopy().copy(sys.ctrs[i].f.args(), sys.args, sys.ctrs[i].f.expr()) - eps);
					f_2=&(-ExprCopy().copy(sys.ctrs[i].f.args(), sys.args, sys.ctrs[i].f.expr()) - eps);
				}
				add_ctr(ExprCtr(*f_1,LEQ));
				cleanup(*f_1, false);
				add_ctr(ExprCtr(*f_2,LEQ));
				cleanup(*f_2, false);
			} else {

				const ExprNode* f_i=&ExprCopy().copy(sys.ctrs[i].f.args(), sys.args, sys.ctrs[i].f.expr());

				switch (sys.ctrs[i].op) {
				case LT:
					ibex_warning("warning: strict inequality (<) replaced by inequality (<=).");
					break;
				case LEQ:
					break;
				case GT:
					ibex_warning("warning: strict inequality (>) replaced by inequality (>=).");
				case GEQ:
					f_i = & (- (*f_i)); // reverse the inequality
					break;
				default:
					assert(false);
					break;
				}

				add_ctr(ExprCtr(*f_i,LEQ));
				cleanup(*f_i, false);
			}


		}
	}


	~SystemExtend() {
		delete &((*args)[nb_arg-1]); // the y variable!
	}
};

} // end anonymous namespace

} // end namespace ibex
