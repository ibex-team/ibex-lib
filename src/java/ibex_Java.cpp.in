//============================================================================
//                                  I B E X                                   
// File        : Ibex_java.cpp.in
// Author      : Gilles Chabert
// Copyright   : Ecole des Mines de Nantes (France)
// License     : See the LICENSE file
// Created     : Jul 18, 2012
// Last Update : Nov 02, 2017
//============================================================================

#include "@JAVA_SIGNATURE@_Ibex.h"
#include "ibex_CtcCompo.h"
#include "ibex_CtcHC4.h"
#include "ibex_CtcNewton.h"
#include "ibex_CtcFwdBwd.h"
#include "ibex_CtcInteger.h"
#include "ibex_CtcNotIn.h"
#include "ibex_CtcUnion.h"
#include "ibex_CtcIdentity.h"
#include "ibex_SyntaxError.h"
#include "ibex_System.h"
#include "ibex_VarSet.h"
#include "ibex_SmearFunction.h"
#include "ibex_Solver.h"
#include "ibex_CellStack.h"

#include <stdio.h>
#include <vector>
#include <list>
#include <sstream>
#include <jni.h>

using namespace std;
using namespace ibex;


namespace {

// Restore the environement of Ibex
// (rounding mode for Gaol)
// see issue #307 (ibex-lib)
void ibex_restore() {
// note: cannot replace with if (strcmp(_IBEX_INTERVAL_LIB_,"GAOL")==0)
// because we need this at preprocessing
#ifdef __gaol__
	gaol::round_upward();
#endif
}

// Restore the default rounding mode for Java
// see issue #3 (ibex-java)
void java_restore() {
#ifdef __gaol__
	gaol::round_nearest();
#endif
}

enum {
	FAIL     = 0,
	ENTAILED = 1,
	CONTRACT = 2,
	NOTHING  = 3,
};

enum {
	NOT_SIGNIFICANT = 4,
	INFLATE         = 5,
	FULL_INFLATE    = 6,
	BAD_POINT       = 7,
	UNKNOWN_POINT   = 8
};

enum {
	STARTED = 0,
	DISCRETE_NOT_INSTANCIATED = 1
};

enum {
	UNKNOWN     = 0,
	SOLUTION    = 1,
	SEARCH_OVER = 2,
	NOT_STARTED = 3
};

enum {
	FALSE_        = 0,
	TRUE_         = 1,
	FALSE_OR_TRUE = 2
};

enum {
	//SYNTAX_ERROR  = -1,
	BAD_DOMAIN    = -2,
	NOT_BUILT     = -3
};

class Instance {
public:
	int nb_var;
	BitSet params;
	Vector prec;
	vector<char*> ctrs_syntax;

	System* sys;       // all the constraints
	CtcCompo* ctc;     // contractor for the system
	CtcUnion* neg;     // contractor for the negation

	SmearSumRelative* bis;  // bisector for the solver
	CellStack* stack;       // cell buffer for the solver
	Solver* solver;         // the solver
	bool preserve_rounding;
	
	Instance(int n, const BitSet& _params, const Vector& prec, bool preserve_rounding) : nb_var(n), params(_params), prec(prec), sys(NULL),
			ctc(NULL), neg(NULL), bis(NULL), stack(NULL), solver(NULL), preserve_rounding(preserve_rounding) {

	}

	void build() {
		//cout << " [ibex] new constraint:" << _syntax << " nb var=" << nb_var << " option=" << option << endl;

		if (!preserve_rounding) 
			ibex_restore();  // do this once for all

		stringstream s;
		for (size_t i=0; i<ctrs_syntax.size(); i++) {
			if (i>0) s << ';';
			s << ctrs_syntax[i];
		}

		sys=new System(nb_var,s.str().c_str()); // may throw SyntaxError

		Array<Ctc> c_out(sys->nb_ctr);
		for (int i=0; i<sys->nb_ctr; i++) {
			c_out.set_ref(i,*new CtcFwdBwd(sys->ctrs[i]));
		}
		ctc = new CtcCompo(c_out);

		Array<Ctc> c_in(sys->nb_ctr);
		for (int i=0; i<sys->nb_ctr; i++) {
			NumConstraint& ctr=sys->ctrs[i];
			c_in.set_ref(i,*new CtcNotIn(ctr.f,ctr.right_hand_side()));
		}
		neg = new CtcUnion(c_in);

		bis=new SmearSumRelative(*sys, prec);
		stack=new CellStack();

		Vector eps_max(nb_var,POS_INFINITY);
		solver = new Solver(*sys, *ctc, *bis, *stack, prec, eps_max);
		solver->set_params(VarSet(sys->nb_var, params, false));
	}

	IntervalVector read_box(JNIEnv *env, const jdouble* d, int size) {

		if (size!=nb_var*2) return IntervalVector::empty(nb_var);

		IntervalVector box(nb_var);

		for (int i=0; i<nb_var; i++) {
			box[i]=Interval(d[2*i],d[2*i+1]);
		}

		return box;
	}

	void write_box(JNIEnv *env, const IntervalVector& box, jdouble* d) {

		for (int i=0; i<nb_var; i++) {
			d[2*i]=box[i].lb();
			d[2*i+1]=box[i].ub();
		}
	}

	~Instance() {
		if (sys) {
			delete sys;

			for (int i=0; i<ctc->list.size(); i++) {
				delete &ctc->list[i];
			}
			delete ctc;

			for (int i=0; i<neg->list.size(); i++) {
				delete &neg->list[i];
			}
			delete neg;

			delete bis;
			delete stack;
			delete solver;
		}

		for (size_t i=0; i<ctrs_syntax.size(); i++)
			free(ctrs_syntax[i]);
	}
};

Instance* get_instance(JNIEnv* env, jobject obj) {
	jclass clazz = env->GetObjectClass(obj);
	jfieldID _data = env->GetFieldID(clazz, "data", "J"); // J stands for "long" (64 bits)
	jlong address = env->GetLongField(obj ,_data);
	return (Instance*) address;
}

// either return BAD_POINT, UNKNOWN_POINT or INFLATE (the latter case also corresponds to the NOT_SIGNIFICANT case)
jint inflate(NumConstraint& ctr, const IntervalVector& xin, IntervalVector& x, jboolean in) {

	jint result;

	Interval yin=ctr.f.eval(xin);

	if (ctr.op==EQ) {
		// we check this is not a vector-valued constraint
		assert(ctr.f.image_dim()==1);
		// the only thing we can do is to check "p"
		if (yin==Interval::zero()) result=INFLATE;
		else result=UNKNOWN_POINT;
		x=xin;
	} else {
		Interval y;

		switch (ctr.op) {
		case LT:  y = in? Interval(NEG_INFINITY,ibex::previous_float(0)) : Interval::pos_reals(); break;
		case LEQ: y = in? Interval::neg_reals() : Interval(ibex::next_float(0),POS_INFINITY); break;
		case GEQ: y = in? Interval::pos_reals() : Interval(NEG_INFINITY,ibex::previous_float(0)); break;
		case GT:  y = in? Interval(ibex::next_float(0),POS_INFINITY) : Interval::neg_reals(); break;
		case EQ:  ibex_error("inflation with equalities"); break;
		}

		if (!yin.is_subset(y)) {
			if ((yin & y).is_empty()) result=BAD_POINT;
			else result=UNKNOWN_POINT;
			x=xin;
		} else {
			ctr.f.ibwd(y,x,xin);
			result=INFLATE;
		}
	}

	return result;
}

#define EPS_CONTRACT 0.01

}

JNIEXPORT void JNICALL Java_@JAVA_SIGNATURE@_Ibex_init(JNIEnv* env, jobject obj, jdoubleArray _prec, jboolean preserve_rounding) {
	jint size  = env->GetArrayLength(_prec);
	jdouble* prec = env->GetDoubleArrayElements(_prec, 0);


	BitSet b(size);
	Vector prec_vec(size);

	for (int i=0; i<size; i++) {
		if (prec[i]<0) {
			b.add(i);
			prec_vec[i]=1e-20;
		} else
			prec_vec[i]=prec[i];
	}

	jclass clazz = env->GetObjectClass(obj);
	jfieldID _data = env->GetFieldID(clazz, "data", "J");
	env->SetLongField(obj ,_data, (jlong) new Instance(size, b, prec_vec, preserve_rounding));

	env->ReleaseDoubleArrayElements(_prec, prec, 0);
}

JNIEXPORT jboolean JNICALL Java_@JAVA_SIGNATURE@_Ibex_add_1ctr(JNIEnv* env, jobject obj, jstring _syntax) {
	
	Instance& inst = *get_instance(env,obj);

	if (inst.sys!=NULL) return false;
	
	const char* syntax = env->GetStringUTFChars(_syntax, 0);

	inst.ctrs_syntax.push_back(strdup(syntax));

	env->ReleaseStringUTFChars(_syntax, syntax);
	
	return true;
}

JNIEXPORT jboolean JNICALL Java_@JAVA_SIGNATURE@_Ibex_build(JNIEnv* env, jobject obj) {

	Instance& inst = *get_instance(env,obj);

	if (inst.preserve_rounding) ibex_restore(); // required as the parser may perform interval ops

	if (inst.sys==NULL) {
		try {
			inst.build();
			if (inst.preserve_rounding) java_restore(); 
			return true;
		} catch(SyntaxError&) {
			if (inst.preserve_rounding) java_restore(); 
			return false;
		}
	} else {
		if (inst.preserve_rounding) java_restore(); 
		return true; 
	}
}

JNIEXPORT jint JNICALL Java_@JAVA_SIGNATURE@_Ibex_contract__I_3DID(JNIEnv* env, jobject obj, jint n, jdoubleArray _d, jint reif, jdouble rel_eps) {

	
	Instance& inst = *get_instance(env,obj);

	if (inst.sys==NULL) {
		return NOT_BUILT;
	}

	if (inst.preserve_rounding) ibex_restore(); 
		
	jint result = NOTHING; // by default

	jdouble* d = env->GetDoubleArrayElements(_d, 0);
	IntervalVector box=inst.read_box(env,d,env->GetArrayLength(_d));
	if (box.is_empty()) {
		env->ReleaseDoubleArrayElements(_d, d, 0);
		if (inst.preserve_rounding) java_restore(); 
		return BAD_DOMAIN;
	}

	IntervalVector savebox(box);
	
	//cout << " [ibex] contract nÂ°" << n << " with box=" << box << endl;
	if (reif==TRUE_ || reif==FALSE_OR_TRUE) {

		inst.ctc->list[n].contract(box);

		if (box.is_empty()) {
			//cout << " [ibex] emtpybox --> FAILED\n";
			result=FAIL;
		}

		else {
			if (reif==TRUE_ && savebox.rel_distance(box) >= rel_eps) {

				//cout << " [ibex] --> CONTRACT to " << box << "\n";
				savebox = box;
				result=CONTRACT; // temporary assignment (final result may be ENTAILED)
			}

			//cout << " [ibex] try negation.\n";
			inst.neg->list[n].contract(box);

			if (box.is_empty()) {
				//cout << " [ibex] emtpybox --> ENTAILED\n";
				result=ENTAILED;
			}
			else if (result==CONTRACT) {
				//cout << " [ibex] nothing --> CONTRACT to " << savebox << "\n";
				inst.write_box(env,savebox,d);
			}
		}
	}

	if (reif==FALSE_OR_TRUE) box=savebox;

	if (reif==FALSE_ || reif==FALSE_OR_TRUE) {

		inst.neg->list[n].contract(box);

		if (box.is_empty()) {
			result=ENTAILED;
		} else {

			if (reif==FALSE_ && savebox.rel_distance(box) >= rel_eps) {
				savebox = box;
				result=CONTRACT; // temporary assignment (final result may be FAIL)
			}

			inst.ctc->list[n].contract(box);

			if (box.is_empty()) {
				result=FAIL;
			} else if (result==CONTRACT) {
				inst.write_box(env,savebox,d);
			}
		}
	}

	env->ReleaseDoubleArrayElements(_d, d, 0);
	
	if (inst.preserve_rounding) java_restore(); 
	return result;
}

JNIEXPORT jint JNICALL Java_@JAVA_SIGNATURE@_Ibex_contract__I_3DD(JNIEnv* env, jobject obj, jint n, jdoubleArray _d, jdouble rel_eps) {
	return Java_@JAVA_SIGNATURE@_Ibex_contract__I_3DID(env,obj,n,_d,1,rel_eps);
}

JNIEXPORT jint JNICALL Java_@JAVA_SIGNATURE@_Ibex_contract__I_3DI(JNIEnv* env, jobject obj, jint n, jdoubleArray _d, jint reif) {
	return Java_@JAVA_SIGNATURE@_Ibex_contract__I_3DID(env,obj,n,_d,reif,EPS_CONTRACT);
}

JNIEXPORT jint JNICALL Java_@JAVA_SIGNATURE@_Ibex_contract__I_3D(JNIEnv* env, jobject obj, jint n, jdoubleArray _d) {
	return Java_@JAVA_SIGNATURE@_Ibex_contract__I_3DID(env,obj,n,_d,1,EPS_CONTRACT);
}

JNIEXPORT jint JNICALL Java_@JAVA_SIGNATURE@_Ibex_inflate(JNIEnv* env, jobject obj, jint n, jdoubleArray _din, jdoubleArray _d, jboolean in) {

	Instance& inst = *get_instance(env,obj);

	if (inst.sys==NULL) {
		return NOT_BUILT;
	}

	if (inst.preserve_rounding) ibex_restore(); 
		
	jint result;

	jdouble* d = env->GetDoubleArrayElements(_d, 0);
	IntervalVector x=inst.read_box(env,d,env->GetArrayLength(_d));
	if (x.is_empty()) {
		env->ReleaseDoubleArrayElements(_d, d, 0);
		if (inst.preserve_rounding) java_restore(); 
		return BAD_DOMAIN;
	}

	jdouble* din = env->GetDoubleArrayElements(_din, NULL);
	if (env->GetArrayLength(_din)!=inst.nb_var) {
		env->ReleaseDoubleArrayElements(_d, d, 0);
		env->ReleaseDoubleArrayElements(_din, din, 0);
		if (inst.preserve_rounding) java_restore(); 
		return BAD_DOMAIN;
	}

	IntervalVector xin(inst.nb_var); // we cannot use read_box because din is a vector (not interval)
	for (int i=0; i<inst.nb_var; i++) {
		xin[i]=Interval(din[i],din[i]);
	}

	IntervalVector savebox(x);

	if (in) {
		// try first "full inflate" using negation contractor
		// (because of inner rounding, the inflation may
		// fail in entirely proving x is inner so we use
		// the contractor instead)
		inst.neg->list[n].contract(x);

		if (x.is_empty())
			result=FULL_INFLATE;
		else
			result=INFLATE; // by default

		x=savebox; // result==FULL_INFLATE => savebox is entirely "inside" this constraint

		if (result!=FULL_INFLATE) {
			// old note (for the case of a list of several sub-constraints):
			// in principle, we could also slightly optimize the
			// loop below by using the negation contractor of
			// sub-constraints (to remove the inner rounding effect).
			// But this would bring non significant gain since the
			// result would probably not be FULL_INFLATE in this case.
			result=inflate(inst.sys->ctrs[n],xin,x,in); // will "contract" x to the inflated box.
		}
	} else {

		// same comments as above
		inst.ctc->list[n].contract(x);

		if (x.is_empty())
			result=FULL_INFLATE;
		else
			result=BAD_POINT; // by default

		x=savebox;

		if (result!=FULL_INFLATE) {

			result=inflate(inst.sys->ctrs[n],xin,x,in);

		}
	}

	//cout << "savebox=" << savebox << " box=" << x << endl;

	if (result==INFLATE) {
		if (savebox.is_subset(x))
			result=FULL_INFLATE;
		else if (savebox.rel_distance(x) <= (1.0-EPS_CONTRACT))
			inst.write_box(env,x,d);
		else
			result=NOT_SIGNIFICANT;
	}

	env->ReleaseDoubleArrayElements(_d, d, 0);
	env->ReleaseDoubleArrayElements(_din, din, 0);

	if (inst.preserve_rounding) java_restore(); 
	return result;
}

JNIEXPORT jint JNICALL Java_@JAVA_SIGNATURE@_Ibex_start_1solve(JNIEnv* env, jobject obj, jdoubleArray _d) {

	Instance& inst = *get_instance(env,obj);

	if (inst.sys==NULL) {
		return NOT_BUILT;
	}

	if (inst.preserve_rounding) ibex_restore();
		
	jdouble* d = env->GetDoubleArrayElements(_d, 0);

	IntervalVector box=inst.read_box(env,d,env->GetArrayLength(_d));
	if (box.is_empty()) {
		env->ReleaseDoubleArrayElements(_d, d, 0);
		if (inst.preserve_rounding) java_restore(); 
		return BAD_DOMAIN;
	}

	for (int i=0; i<inst.nb_var; i++) {
		if (inst.params[i] && !box[i].is_degenerated()) {
			if (inst.preserve_rounding) java_restore(); 
			return DISCRETE_NOT_INSTANCIATED;
		}
	}

	inst.solver->start(box);

	env->ReleaseDoubleArrayElements(_d, d, 0);
	
	if (inst.preserve_rounding) java_restore(); 
	return STARTED;
}

JNIEXPORT jint JNICALL Java_@JAVA_SIGNATURE@_Ibex_next_1solution(JNIEnv* env, jobject obj, jdoubleArray _d) {
	Instance& inst = *get_instance(env,obj);

	if (inst.sys==NULL) {
		return NOT_BUILT;
	}

	if (inst.preserve_rounding) ibex_restore();
		
	jint result;

	jdouble* d = env->GetDoubleArrayElements(_d, 0);

	IntervalVector box=inst.read_box(env,d,env->GetArrayLength(_d));
	if (box.is_empty()) {
		env->ReleaseDoubleArrayElements(_d, d, 0);
		if (inst.preserve_rounding) java_restore(); 
		return BAD_DOMAIN;
	}

	const IntervalVector* sol = NULL;

	CovSolverData::BoxStatus status;

	inst.solver->next(status,&sol);

	if (sol!=NULL) {
		inst.write_box(env,*sol,d);
		result = status==CovSolverData::UNKNOWN? UNKNOWN : SOLUTION;
	} else {
		result = SEARCH_OVER;
	}

	env->ReleaseDoubleArrayElements(_d, d, 0);
	
	if (inst.preserve_rounding) java_restore(); 
	return result;
}

JNIEXPORT void JNICALL Java_@JAVA_SIGNATURE@_Ibex_release(JNIEnv* env, jobject obj) {
	delete get_instance(env,obj);
}
