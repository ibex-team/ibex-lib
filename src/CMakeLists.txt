# Create cxscconf.h file (will be created in the build directory
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/ibex_Setting.h.in
  ${CMAKE_CURRENT_BINARY_DIR}/ibex_Setting.h
)

set( DIR_LIST 
	arithmetic 
	bisector 
	combinatorial 
	contractor 
	function 
	numeric 
	geometry 
	parser 
	set 
	strategy 
	symbolic 
	system 
	tools 
	predicate 
	cliquer	
)

if(WIN32)
	add_definitions(-DYY_NO_UNISTD_H)
endif(WIN32)

# include all .cpp and .h  
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

foreach( dir ${DIR_LIST})
	message(STATUS ${dir})
	file(GLOB dir_headers ${CMAKE_CURRENT_SOURCE_DIR}/${dir}/*.h)
	file(GLOB dir_headers_ ${CMAKE_CURRENT_SOURCE_DIR}/${dir}/*.h_)
	file(GLOB dir_src ${CMAKE_CURRENT_SOURCE_DIR}/${dir}/*.cpp)
	INCLUDE_DIRECTORIES(${dir})
	set(SRCS ${SRCS} ${dir_src})
	set(HEADERS ${HEADERS} ${dir_headers} ${dir_headers_})
endforeach(dir)
set(HEADERS ${HEADERS} ${CMAKE_CURRENT_BINARY_DIR}/ibex_Setting.h)

set(dir ${CMAKE_CURRENT_SOURCE_DIR}/parser)
if(GENERATE_PARSER_FILES)
	# using flex/bison generate parser.cpp file 
	find_package(BISON)
	find_package(FLEX)  
	set(SRCS ${SRCS} ${dir}/parser.cpp_ )
	FLEX_TARGET(Lexer ${dir}/lexer.l  ${CMAKE_CURRENT_BINARY_DIR}/lexer.cpp COMPILE_FLAGS "-Pibex")
	BISON_TARGET(Parser ${dir}/parser.yc ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp COMPILE_FLAGS "--name-prefix=ibex --report=all --file-prefix=parser")
	ADD_FLEX_BISON_DEPENDENCY(Lexer Parser)
	set(SRCS ${SRCS} ${BISON_Parser_OUTPUTS} ${FLEX_Lexer_OUTPUTS})
else(GENERATE_PARSER_FILES)
	FILE(COPY ${dir}/generated_lexer.cpp_ DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
	FILE(RENAME ${CMAKE_CURRENT_BINARY_DIR}/generated_lexer.cpp_ ${CMAKE_CURRENT_BINARY_DIR}/lexer.cpp)
	FILE(COPY ${dir}/generated_parser.cpp_ DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
	FILE(RENAME ${CMAKE_CURRENT_BINARY_DIR}/generated_parser.cpp_ ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp)
	FILE(COPY ${dir}/generated_parser.hpp_ DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
	FILE(RENAME ${CMAKE_CURRENT_BINARY_DIR}/generated_parser.hpp_ ${CMAKE_CURRENT_BINARY_DIR}/parser.hpp)
	set(SRCS ${SRCS} ${CMAKE_CURRENT_BINARY_DIR}/lexer.cpp ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp)
	set(HEADERS ${HEADERS} ${CMAKE_CURRENT_BINARY_DIR}/parser.hpp)
endif(GENERATE_PARSER_FILES)

# Write Header ibex.h
file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/include/ibex.h)
file(GLOB_RECURSE IBEX_HEADERS ${CMAKE_CURRENT_SOURCE_DIR} "ibex_*.h")
file(GLOB IBEX_HEADERS_CLIQUER "${CMAKE_CURRENT_SOURCE_DIR}/cliquer/*.h")
set(IBEX_HEADERS ${IBEX_HEADERS} ${IBEX_HEADERS_CLIQUER} ${CMAKE_CURRENT_BINARY_DIR}/ibex_Setting.h)
file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/include/ibex.h "// This file is automatically generated\n")
foreach(full_filename ${IBEX_HEADERS})
	GET_FILENAME_COMPONENT( filename ${full_filename} NAME)
   	file(APPEND "${CMAKE_CURRENT_BINARY_DIR}/include/ibex.h" "#include \"${filename}\"\n")
endforeach(full_filename)

## Install files in header directory
#Only used to build tests
foreach(full_filename ${HEADERS})
	GET_FILENAME_COMPONENT( filename ${full_filename} NAME)
  configure_file(${full_filename} "${CMAKE_CURRENT_BINARY_DIR}/include/${filename}" COPYONLY)
endforeach(full_filename)




#Add static or shared library to build
if(NOT WIN32)
  if(BUILD_SHARED)
    add_library(ibex SHARED ${SRCS} ${HEADERS} )
  else(BUILD_SHARED)
    add_library(ibex STATIC ${SRCS} ${HEADERS})
  endif(BUILD_SHARED)
else(NOT WIN32)
  # on Windows only a static version of the library can be built.
  add_library(ibex STATIC ${SRCS} ${HEADERS})
endif(NOT WIN32)

# Install Lib
install(TARGETS ibex DESTINATION lib)
# Install headers
install(FILES ${HEADERS} DESTINATION include/ibex)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/include/ibex.h DESTINATION include/ibex)



install_pkg_config_file(ibex
	DESCRIPTION "A C++ library for interval-based algorithm design"
	CFLAGS "-I\${includedir}/ibex  -frounding-math -ffloat-store"
	LIBS "-libex -lClp -lCoinUtils -lz -lm -lprim"
	REQUIRES 
	VERSION ${PACKAGE_VERSION}
)
#if(BUILD_SHARED_LIBS)
#add_library(ibex SHARED ${SRCS} ${HEADERS})
#endif(ibex STATIC ${SRCS} ${HEADERS})

#configure_file(
#  ${CMAKE_CURRENT_SOURCE_DIR}/generate_header.cmake.in
#  ${CMAKE_CURRENT_BINARY_DIR}/generate_header.cmake
#  COPYONLY
#)
#add_custom_command(
#	OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/ibex.h
#	COMMAND ${CMAKE_COMMAND} -P
#  ${CMAKE_CURRENT_BINARY_DIR}/generate_header.cmake
#)
#file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/ibex.h)
#add_custom_target(gen_header ALL DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/ibex.h )

