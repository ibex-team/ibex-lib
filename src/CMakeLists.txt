################################################################################
# libibex
################################################################################
add_library (ibex "")

target_include_directories (ibex PUBLIC "$<BUILD_INTERFACE:${IBEX_INCDIRS}>")

target_link_libraries (ibex PUBLIC ${INTERVAL_LIB_TARGET} ${LP_LIB_TARGET})

if (WIN32)

  if (BUILD_SHARED_LIBS)
    # --------------------------------------------------------------------------------
    # directories where the archives files (.lib) are stored
    #get_target_property(INTERVAL_LIB_ARCHIVE_DIR ${INTERVAL_LIB_TARGET} ARCHIVE_OUTPUT_DIRECTORY)
    #get_target_property(LP_LIB_ARCHIVE_DIR ${LP_LIB_TARGET} ARCHIVE_OUTPUT_DIRECTORY)
  
    #if (INTERVAL_LIB_ARCHIVE_DIR)
    #  target_link_directories(ibex PUBLIC "${INTERVAL_LIB_ARCHIVE_DIR}")
    #else()
    #  message(FATAL_ERROR "Could not retreive ARCHIVE_OUTPUT_DIRECTORY for target ${INTERVAL_LIB_TARGET}")
    #endif()
    
    # directories where the archive files (.lib) are stored
    target_link_directories(ibex PUBLIC "$<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/bin>")

    #if (LP_LIB_ARCHIVE_DIR)
    #  target_link_directories(ibex PUBLIC "${LP_LIB_ARCHIVE_DIR}")
    #else()
    #  message(FATAL_ERROR "Could not retreive ARCHIVE_OUTPUT_DIRECTORY for target ${LP_LIB_TARGET}")
    #endif()

    ## Note: we could use TARGET_LINKER_FILE_DIR instead:
    #    target_link_directories(ibex PUBLIC "$<TARGET_LINKER_FILE_DIR:${INTERVAL_LIB_TARGET}>" "$<TARGET_LINKER_FILE_DIR:${LP_LIB_TARGET}>")
    ## but this fails on Appveyor
    # --------------------------------------------------------------------------------
  endif()
  
  # We (may) need this for strdup under Windows (see issue #287)
  target_compile_options (ibex PUBLIC "-U__STRICT_ANSI__")
endif ()

if (WIN32)
	target_compile_options (ibex PUBLIC "/wd4267" "/wd4244" "/wd4800" "/wd4018" "/wd4101" "/wd4715" "/wd4996" "/wd4065")
else ()
	target_compile_options (ibex PUBLIC "-Wno-unknown-pragmas" "-Wno-undefined-var-template") # last warning appears with Filib on MacOS
endif ()
	

################################################################################
# ibex_Setting.h
################################################################################
configure_file (ibex_Setting.h.in ibex_Setting.h)
target_sources (ibex PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/ibex_Setting.h)
target_include_directories (ibex PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>")

################################################################################
# Recurse on all subdirectories to add source files
################################################################################
# source files from interval_lib and lp_lib wrappers
target_sources (ibex PRIVATE ${IBEX_SRC})

# Note: operators subdir is handled by CMakeLists.txt from symbolic
foreach (subdir arithmetic bisector cell combinatorial contractor data function
                loup numeric optim parser predicate set solver strategy symbolic system
                tools)
  add_subdirectory (${subdir})
endforeach()

################################################################################
# Parser with Flex and Bison
################################################################################
# Note: we handle the parser here as target_sources does not handle well
# generated files in subdirectory

# FLEX
set (FLEX_FLAGS "-Pibex")
if (WIN32)
  find_package (FLEX 2.5.6) # We need version >= 2.5.6 to have --nounistd
  string (APPEND FLEX_FLAGS " --nounistd")
else ()
  find_package (FLEX)
endif ()
if (NOT FLEX_FOUND)
  message (FATAL_ERROR "Flex is needed to build the parser")
endif ()
flex_target (Flex parser/lexer.l ${CMAKE_CURRENT_BINARY_DIR}/parser/lexer.lex.cc
                                                  COMPILE_FLAGS "${FLEX_FLAGS}")

# BISON
find_package (BISON)
if (NOT BISON_FOUND)
  message (FATAL_ERROR "Flex is needed to build the parser")
endif ()
bison_target (Parser parser/parser.yc
                  ${CMAKE_CURRENT_BINARY_DIR}/parser/parser.tab.cc
                  DEFINES_FILE ${CMAKE_CURRENT_BINARY_DIR}/parser/parser.tab.hh
                  COMPILE_FLAGS "--name-prefix=ibex --report=all")
add_flex_bison_dependency (Flex Parser)

target_sources (ibex PRIVATE ${FLEX_Flex_OUTPUTS} ${BISON_Parser_OUTPUTS})
target_include_directories (ibex PUBLIC
                        "$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/parser>")

################################################################################
# ibex.h and ibex_Setting.h
################################################################################
# Get list of headers
get_target_property (IBEX_SRC ibex SOURCES)
ibex_list_filter_header (IBEX_HDR "\\.(h|hpp)$" ${IBEX_SRC})
ibex_list_filter (IBEX_OPS_HDR "operators/.*\\.h" ${IBEX_SRC})
if (IBEX_OPS_HDR)
  list (REMOVE_ITEM IBEX_HDR ${IBEX_OPS_HDR}) # remove operators headers
endif ()

# Generate ibex.h
set (IBEX_MAIN_HEADER ${CMAKE_CURRENT_BINARY_DIR}/ibex.h)
file (WRITE ${IBEX_MAIN_HEADER} "/* This file in generated by CMake */\n\n")
file (APPEND ${IBEX_MAIN_HEADER} "#ifndef __IBEX_H__\n")
file (APPEND ${IBEX_MAIN_HEADER} "#define __IBEX_H__\n\n")
foreach (hdr ${IBEX_HDR})
  get_filename_component (header_name ${hdr} NAME)
  file (APPEND ${IBEX_MAIN_HEADER} "#include <${header_name}>\n")
endforeach()
file (APPEND ${IBEX_MAIN_HEADER} "\n#endif /* __IBEX_H__ */\n")

################################################################################
# binaries
################################################################################
add_subdirectory (bin)

################################################################################
# Java
################################################################################
add_subdirectory (java)

################################################################################
# installation
################################################################################
target_include_directories (ibex PUBLIC
                        "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>"
                        "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/ibex>")

install (TARGETS ibex EXPORT ibexExport DESTINATION ${CMAKE_INSTALL_LIBDIR}
                                                            COMPONENT devtools)
install (FILES ${IBEX_MAIN_HEADER} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
                                                            COMPONENT devtools)
ibex_list_filter (IBEX_SRC_INSTALLABLE "\\.(h|hpp|inl)$" ${IBEX_SRC})
install (FILES ${IBEX_SRC_INSTALLABLE}
          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ibex COMPONENT devtools)

#
set (IBEX_TARGETS_CONFIG_FILE ibex-targets.cmake)
configure_file (ibex-config.cmake.in ibex-config.cmake @ONLY)
install (FILES ${CMAKE_CURRENT_BINARY_DIR}/ibex-config.cmake
          DESTINATION ${CMAKE_INSTALL_CONFIGCMAKE}
          COMPONENT devtools)

# export ibex targets in ibex-targets.cmake
install (EXPORT ibexExport FILE ${IBEX_TARGETS_CONFIG_FILE}
                           NAMESPACE Ibex::
                           DESTINATION ${CMAKE_INSTALL_CONFIGCMAKE}
                           COMPONENT devtools)

# export companion file for version
include (CMakePackageConfigHelpers)
set (VERSION_FILE "${CMAKE_CURRENT_BINARY_DIR}/ibex-config-version.cmake")
write_basic_package_version_file (${VERSION_FILE} COMPATIBILITY AnyNewerVersion)
install (FILES ${VERSION_FILE} DESTINATION ${CMAKE_INSTALL_CONFIGCMAKE}
                                                            COMPONENT devtools)
