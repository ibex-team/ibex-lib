/* ============================================================================
 * I B E X - Functions
 * ============================================================================
 * Copyright   : Ecole des Mines de Nantes (FRANCE)
 * License     : This program can be distributed under the terms of the GNU LGPL.
 *               See the file COPYING.LESSER.
 *
 * Author(s)   : Gilles Chabert
 * Created     : Jan 5, 2012
 * ---------------------------------------------------------------------------- */

#include <sstream>

#include "ibex_Function.h"
#include "ibex_Expr.h"
#include "ibex_Decorator.h"
#include "ibex_ExprCopy.h"
#include "ibex_ExprDiff.h"
#include "ibex_Eval.h"
#include "ibex_HC4Revise.h"
#include "ibex_Gradient.h"
#include "ibex_String.h"
#include "ibex_UnknownFileException.h"
#include "ibex_SyntaxError.h"

extern void ibexparse_string(const char* syntax);

using namespace std;

namespace ibex {

namespace {

const char* DIFF_PREFIX = "d"; // when the differential of a function is generated, the name is prefixed with DIFF_PREFIX

/*
 * Find the components used in the function
 * \pre the symbol keys must have been set
 */
class FindInputsUsed: public ExprVisitor {
public:
	std::vector<bool>& is_used;
	int* symbol_index; // first variable index of a symbol
	int current_index; // idem for the subexpression. -1 when subexpression is not an index

	FindInputsUsed(const Array<const ExprSymbol>& x, const ExprNode& y, std::vector<bool>& is_used) : is_used(is_used) {
		symbol_index = new int[x.size()];
		int index=0;

		for (int i=0; i<x.size(); i++) {
			symbol_index[i]=index;
			for (int j=0; j<x[i].dim.size(); j++) {
				index++;
				is_used.push_back(false); // by default
			}
		}

		visit(y);

		if (current_index!=-1) {
			for (int i=0; i<y.dim.size(); i++)
				is_used[current_index+i]=true;
		}
		delete[] symbol_index;
	}

	virtual void visit(const ExprNode& e)     {
		e.acceptVisitor(*this);
	}

	virtual void visit(const ExprLeaf& e)     {
		e.acceptVisitor(*this);
	}

	virtual void visit(const ExprIndex& e)    {
		visit(e.expr);
		if (current_index!=-1)
			current_index+=e.index*e.dim.size();
		// symbol_index is left unchanged.
	}

	virtual void visit(const ExprSymbol& e)   {
		current_index=symbol_index[e.key];
	}

	virtual void visit(const ExprConstant&)   {
		current_index=-1;
	}

	virtual void visit(const ExprNAryOp& e)   {
		for (int i=0; i<e.nb_args; i++) {
			visit(e.args[i]);
			if (current_index!=-1)
				for (int j=0; j<e.arg(i).dim.size(); j++) is_used[current_index+j]=true;
		}
		current_index=-1;
	}

	virtual void visit(const ExprBinaryOp& e) {
		visit(e.left);
		if (current_index!=-1)
			for (int i=0; i<e.left.dim.size(); i++) is_used[current_index+i]=true;
		visit(e.right);
		if (current_index!=-1)
			for (int i=0; i<e.right.dim.size(); i++) is_used[current_index+i]=true;
		current_index=-1;
	}

	virtual void visit(const ExprUnaryOp& e)  {
		visit(e.expr);
		if (current_index!=-1)
			for (int i=0; i<e.expr.dim.size(); i++) is_used[current_index+i]=true;
		current_index=-1;
	}

};

const char* duplicate_or_generate(const char* name) {
	if (name) return strdup(name);
	else return strdup(ibex::next_generated_func_name());
}

}

Function::Function() : name(NULL), comp(NULL), df(NULL), zero(NULL) {
	// root==NULL <=> the function is not initialized yet
}

Function::Function(const ExprSymbol& x, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprSymbol& x6, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5,x6),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprSymbol& x6, const ExprSymbol& x7, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5,x6,x7),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprSymbol& x6, const ExprSymbol& x7, const ExprSymbol& x8, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5,x6,x7,x8),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprSymbol& x6, const ExprSymbol& x7, const ExprSymbol& x8, const ExprSymbol& x9, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5,x6,x7,x8,x9),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprSymbol& x6, const ExprSymbol& x7, const ExprSymbol& x8, const ExprSymbol& x9, const ExprSymbol& x10, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprSymbol& x6, const ExprSymbol& x7, const ExprSymbol& x8, const ExprSymbol& x9, const ExprSymbol& x10, const ExprSymbol& x11, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprSymbol& x6, const ExprSymbol& x7, const ExprSymbol& x8, const ExprSymbol& x9, const ExprSymbol& x10, const ExprSymbol& x11, const ExprSymbol& x12, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprSymbol& x6, const ExprSymbol& x7, const ExprSymbol& x8, const ExprSymbol& x9, const ExprSymbol& x10, const ExprSymbol& x11, const ExprSymbol& x12, const ExprSymbol& x13, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprSymbol& x6, const ExprSymbol& x7, const ExprSymbol& x8, const ExprSymbol& x9, const ExprSymbol& x10, const ExprSymbol& x11, const ExprSymbol& x12, const ExprSymbol& x13, const ExprSymbol& x14, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprSymbol& x6, const ExprSymbol& x7, const ExprSymbol& x8, const ExprSymbol& x9, const ExprSymbol& x10, const ExprSymbol& x11, const ExprSymbol& x12, const ExprSymbol& x13, const ExprSymbol& x14, const ExprSymbol& x15, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprSymbol& x6, const ExprSymbol& x7, const ExprSymbol& x8, const ExprSymbol& x9, const ExprSymbol& x10, const ExprSymbol& x11, const ExprSymbol& x12, const ExprSymbol& x13, const ExprSymbol& x14, const ExprSymbol& x15, const ExprSymbol& x16, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprSymbol& x6, const ExprSymbol& x7, const ExprSymbol& x8, const ExprSymbol& x9, const ExprSymbol& x10, const ExprSymbol& x11, const ExprSymbol& x12, const ExprSymbol& x13, const ExprSymbol& x14, const ExprSymbol& x15, const ExprSymbol& x16, const ExprSymbol& x17, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprSymbol& x6, const ExprSymbol& x7, const ExprSymbol& x8, const ExprSymbol& x9, const ExprSymbol& x10, const ExprSymbol& x11, const ExprSymbol& x12, const ExprSymbol& x13, const ExprSymbol& x14, const ExprSymbol& x15, const ExprSymbol& x16, const ExprSymbol& x17, const ExprSymbol& x18, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprSymbol& x6, const ExprSymbol& x7, const ExprSymbol& x8, const ExprSymbol& x9, const ExprSymbol& x10, const ExprSymbol& x11, const ExprSymbol& x12, const ExprSymbol& x13, const ExprSymbol& x14, const ExprSymbol& x15, const ExprSymbol& x16, const ExprSymbol& x17, const ExprSymbol& x18, const ExprSymbol& x19, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19),y,name);
}

Function::Function(const ExprSymbol& x1, const ExprSymbol& x2, const ExprSymbol& x3, const ExprSymbol& x4, const ExprSymbol& x5, const ExprSymbol& x6, const ExprSymbol& x7, const ExprSymbol& x8, const ExprSymbol& x9, const ExprSymbol& x10, const ExprSymbol& x11, const ExprSymbol& x12, const ExprSymbol& x13, const ExprSymbol& x14, const ExprSymbol& x15, const ExprSymbol& x16, const ExprSymbol& x17, const ExprSymbol& x18, const ExprSymbol& x19, const ExprSymbol& x20, const ExprNode& y, const char* name) {
	init(Array<const ExprSymbol>(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20),y,name);
}

Function::Function(const Array<const ExprSymbol>& x, const ExprNode& y, const char* name) {
	init(x,y,name);
}

} // end namespace ibex

extern int ibexparse();
extern void ibexrestart(FILE *);
extern FILE* ibexin;

namespace ibex {

namespace parser {
extern Function* function;
}


Function::Function(const char* x, const char* y) {
	build_from_string(Array<const char*>(x),y);
}

Function::Function(const char* x1, const char* x2, const char* y) {
	build_from_string(Array<const char*>(x1,x2),y);
}

Function::Function(const char* x1, const char* x2, const char* x3, const char* y) {
	build_from_string(Array<const char*>(x1,x2,x3),y);
}

Function::Function(const char* x1, const char* x2, const char* x3, const char* x4, const char* y) {
	build_from_string(Array<const char*>(x1,x2,x3,x4),y);
}

Function::Function(const char* x1, const char* x2, const char* x3, const char* x4, const char* x5, const char* y) {
	build_from_string(Array<const char*>(x1,x2,x3,x4,x5),y);
}

Function::Function(const char* x1, const char* x2, const char* x3, const char* x4, const char* x5, const char* x6, const char* y) {
	build_from_string(Array<const char*>(x1,x2,x3,x4,x5,x6),y);
}

Function::Function(const char* x1, const char* x2, const char* x3, const char* x4, const char* x5, const char* x6, const char* x7, const char* y) {
	build_from_string(Array<const char*>(x1,x2,x3,x4,x5,x6,x7),y);
}

Function::Function(const char* x1, const char* x2, const char* x3, const char* x4, const char* x5, const char* x6, const char* x7, const char* x8, const char* y) {
	build_from_string(Array<const char*>(x1,x2,x3,x4,x5,x6,x7,x8),y);
}

void Function::build_from_string(const Array<const char*>& x, const char* y, const char* name) {

	stringstream s;

	const char* name_copy=duplicate_or_generate(name);

	s << "function " << name_copy << "(";
	for (int i=0; i<x.size(); i++) {
		s << x[i];
		if (i<x.size()-1) s << ",";
	}
	s << ")\n";
	s << "  return " << y << ";\n";
	s << "end\n";

	free((char*) name_copy);

	char* syntax = strdup(s.str().c_str());
	try {
		parser::function=this;
		ibexparse_string(syntax);
		parser::function=NULL;
		free(syntax);
	} catch(SyntaxError& e) {
		parser::function=NULL;
		free(syntax);
		throw e;
	}
}

Function::Function(const char* filename) {
	FILE *fd;
	if ((fd = fopen(filename, "r")) == NULL) throw UnknownFileException(filename);
	ibexin = fd;

	try {
		parser::function=this;
		ibexparse();
		parser::function=NULL;
	}
	catch(SyntaxError& e) {
		parser::function=NULL;
		fclose(fd);
		ibexrestart(ibexin);
		throw e;
	}

	fclose(fd);
}

Function::Function(const Function& f, copy_mode mode) {

	assert(f.cf.code!=NULL);

	// Create the new symbols
	// we have to proceed first the symbols in order to guarantee that
	// they appear in the same order in "dest". Indeed, if we add the symbols
	// as they appear in the expression the copy of a a function (x,y)->y+x
	// would yield (y,x)->y+x.
	Array<const ExprSymbol> x(f.nb_arg());
	varcopy(f.args(),x);

	// Duplicate the expression
	const ExprNode* y;
	if (mode==COPY) {
		y= & ExprCopy().copy(f.symbs,x,f.expr());
		init(x,*y,f.name);
	} else {
		char* name = (char*) malloc(strlen(f.name)+strlen(DIFF_PREFIX)+1); // +1 for null character
		strcpy((char*) name,DIFF_PREFIX);
		strcat((char*) name,f.name);
		y= & ExprDiff().diff(f.symbs,x,f.expr());
		init(x,*y,name);
		free(name);
	}
}

void Function::generate_comp() {
	if (expr().type()==Dim::SCALAR) {
		comp=new Function*[1];
		comp[0]=(Function*) this; // a function cannot be modified anyway
		return;
	}

	comp = new Function*[image_dim()];
	// rem: dimension()==expr().dim.vec_size() if expr() is a vector
	//      and also fvec->nb_args if, in addition, fvec!=NULL

	if (expr().dim.is_vector()) {
		for (int i=0; i<expr().dim.vec_size(); i++) {
			Array<const ExprSymbol> x(nb_arg());
			varcopy(symbs,x);
			const ExprNode& y=ExprCopy().index_copy(symbs, x, expr(), i);
			Function* fi=new Function(x,y);
			const ExprConstant* c=dynamic_cast<const ExprConstant*>(&(fi->expr()));
			if (c && c->get_value()==Interval::ZERO) { // use a more efficient structure than a DAG!
				if (!zero) zero=fi;
				else delete fi;
					comp[i] = zero;
			} else {
				comp[i] = fi;
			}
		}
	}

	else {
		int n=expr().dim.dim3;
		for (int i=0; i<expr().dim.dim2; i++) {

			for (int j=0; j<n; j++) {
				Array<const ExprSymbol> x(nb_arg());
				varcopy(symbs,x);
				const ExprNode& y=ExprCopy().index_copy(symbs, x, expr(), i, j);
				Function* fij=new Function(x,y);
				const ExprConstant* c=dynamic_cast<const ExprConstant*>(&(fij->expr()));
				if (c && c->get_value()==Interval::ZERO) { // use a more efficient structure than a DAG!
					if (!zero) zero=fij;
					else delete fij;
						comp[i*n+j] = zero;
				} else {
					comp[i*n+j] = fij;
				}
			}
		}
	}

//	cout << "--------- separation ---------" << endl;
//	for (int i=0; i<dimension(); i++) {
//		cout << (*this)[i] << endl << endl;
//	}
//	cout << "------------------------------" << endl;
}

void Function::generate_used_vars() const {
	_nb_used_vars=0;
	for (unsigned int i=0; i<is_used.size(); i++) {
		if (is_used[i]) _nb_used_vars++;
	}

	_used_var=new int[_nb_used_vars];
	int j=0;
	for (unsigned int i=0; i<is_used.size(); i++) {
		if (is_used[i]) { _used_var[j++]=i; }
	}
	assert(j==_nb_used_vars);
}

void Function::init(const Array<const ExprSymbol>& x, const ExprNode& y, const char* name) {

	df=NULL;
	comp=NULL;
	zero=NULL;

	this->name=duplicate_or_generate(name);

	__all_symbols_scalar=true; // by default

	symbs.resize(x.size());

	for (int i=0; i<x.size(); i++) {
		symbs.set_ref(i,x[i]);
		((ExprSymbol&) x[i]).key = i;
		__all_symbols_scalar &= x[i].dim.is_scalar();
	}

	FindInputsUsed fsu(x, y, is_used);

	(int&) Function::_nb_var = is_used.size();
	(int&) Function::_image_dim = y.dim.size();

	decorate(x,y);

	// ===== display adjacency (debug) =========
//	cout << "adjacency of function" << *this << ":" << endl;
//	for (int i=0; i<nb_used_inputs; i++)
//		cout << used_input[i] << " ";
//	cout << endl;
}

void Function::decorate(const Array<const ExprSymbol>& x, const ExprNode& y) const {

	Decorator().decorate(x,y);

	arg_domains.resize(nb_arg());
	arg_deriv.resize(nb_arg());
	arg_af2.resize(nb_arg());

	((CompiledFunction&) cf).compile(y); // now that it is decorated, it can be "compiled"

	for (int i=0; i<nb_nodes(); i++) {
		assert(node(i).deco.d);
		assert(node(i).deco.f==NULL); // this node must not belong to another function!
		cf.nodes[i].deco.f=(Function*) this;
	}

	// warning: to place after "compile" if compile modifies deco.d...
	for (int i=0; i<nb_arg(); i++) {
		assert(arg(i).deco.d);
		arg_domains.set_ref(i,*arg(i).deco.d);
		arg_deriv.set_ref(i,*arg(i).deco.g);
		arg_af2.set_ref(i,*arg(i).deco.af2);
	}
}


} // namespace ibex
