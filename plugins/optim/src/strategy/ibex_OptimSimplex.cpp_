//============================================================================
//                                  I B E X                                   
// File        : ibex_OptimSimplex.cpp_
// Author      : Ignacio Araya  Bertrand Neveu
// Copyright   : Ecole des Mines de Nantes (France)
// License     : See the LICENSE file
// Created     : Jul 12, 2012
// Last Update : May 07, 2013
//============================================================================


#include "ibex_Optimizer.h"
#include <stdlib.h>

namespace ibex {

#ifdef _IBEX_WITH_NOLP_

bool Optimizer::update_loup_simplex(const IntervalVector& box) {
	return false;
}

#else

/*

//The system is overconstrained by using the combosition of the Taylor extension in two corner randomly chosen and the Affine Reformulation Technique
//Then the simplex algorithm is applied to obtain a new upper bound loup
//If a new loup is found the method returns true

bool Optimizer::update_loup_simplex(const IntervalVector& box_in) {

	if (!(Interval(1.e-14,1.e6).contains(box_in.max_diam()))) return false;  // A extraire
	// is it necessary?  YES (BNE) Soplex can give false infeasible results with large numbers
	//cout << "[polytope-hull] box before LR (linear relaxation): " << box << endl;

	IntervalVector box(box_in.size()+1);
	write_ext_box(box_in,box);
	box[ext_sys.goal_var()] = Interval(uplo,loup);
	try {
		mylp->cleanConst();
		mylp->initBoundVar(box);

		//returns the number of constraints in the linearized system
		int cont = lr->inlinearization(box, *mylp);
		if (cont <0) return false;
		mylp->setVarObj(ext_sys.goal_var(),1);
		//bool res = lr->goal_linearization(box, *mylp);
		//if (!res) return false;


		LinearSolver::Status_Sol stat = mylp->solve();

		//mylp->writeFile("coucou.lp");
		//system("cat coucou.lp");
		//std::cout << " stat " << stat << std::endl;

		switch (stat) {
		case (LinearSolver::OPTIMAL) :{
			//the linear solution is mapped to intervals and evaluated
			Vector prim(n+1);
			mylp->getPrimalSol(prim);

			bool ret= box.contains(prim) && check_candidate_extended(prim,false); //  [gch] do we know here that the point is inner??

		//	if ( is_inner(prim_int)) std::cout << "[test]--------"  << " loup " << pseudo_loup <<" eval "<< goal(prim_int) << " opt linear "<<opt<< std::endl;

			if (ret) {
				if (trace) {
					int prec=std::cout.precision();
					std::cout.precision(12);
					std::cout << "[simplex1]"  << " loup update " << pseudo_loup  << " loup point  " << loup_point << std::endl;
					std::cout.precision(prec);
				}
				nb_simplex++;
				diam_simplex= ((nb_simplex-1) * diam_simplex + box.max_diam()) / nb_simplex;
			}
			return ret;
		}
		case (LinearSolver::TIME_OUT) : {
			if (trace) { std::cout << "Simplex spent too much time" << std::endl; }
			break;
		}
		case (LinearSolver::MAX_ITER) :{
			if (trace) {
				//mylp->writeFile("coucou.lp");
				//system("cat coucou.lp");
				std::cout << "Simplex spent too many iterations" << std::endl;
			}
			break;
		}
		default:
			break;
		}

		return false;
	}
	catch(LPException&) {
		std::cout << "FAIL" << std::endl;
		return false;
	}
	return false;

}




*/

//The system is overconstrained by using the Taylor extension in one corner randomly chosen
//Then the simplex algorithm is applied to obtain a new upper bound loup
//If a new loup is found the method returns true

bool Optimizer::update_loup_simplex(const IntervalVector& box) {
 try {
  //  cout << " box simplex " << box << endl;
	IntervalVector G(n); // vector to be used by the partial derivatives

	// boolean indicating which corner in direction i is used : true for inferior corner, false for superior one.
    bool * corner = new bool[n]; 
	// random corner choice
	for (int i=0; i<n ; i++)
	  {if (RNG::rand()%2)
	      corner[i]=false;
	    else
	      corner[i]=true;}  
	// the corner used
	IntervalVector x_corner(n);
	for (int i=0 ; i< n ; i++)	  {
		if (corner[i]) {
			if (box[i].lb()>NEG_INFINITY)
				x_corner[i]=box[i].lb() ;
			else if  (box[i].ub()<POS_INFINITY)
				x_corner[i]=box[i].ub() ;
			else
				return false;
		}
		else {
			if (box[i].ub()<POS_INFINITY)
				x_corner[i]=box[i].ub() ;
			else if  (box[i].lb()>NEG_INFINITY)
				x_corner[i]=box[i].lb() ;
			else
				return false;
		}
	}

	Vector row(n+1);
	IntervalVector bound(n+1);

	sys.goal->gradient(box.mid(),G);
	for (int i =0; i< n ; i++)
	  if (G[i].diam() > 1e8) return false;   //to avoid problems with SoPleX

	// ============================================================
	//   Initialization of the bounds and linearize the objective
	// ============================================================


	row[0] = -1.0;
	bound[0] = Interval::ALL_REALS;

	for (int j=0; j<n; j++){
		//The linear variables are generated
		//0 <= xl_j <= diam([x_j])
	  if (corner[j])    {
		  bound[j+1] = Interval(0,box[j].diam());
	      row[j+1]=G[j].ub();
	  }
	  else   {
		  bound[j+1] = Interval(-box[j].diam(),0);
	      row[j+1] = G[j].lb();
	  }

	}

	mylp->clean_ctrs();
	mylp->set_bounds(bound);
	mylp->set_obj_var(0,1.0); // set the objective

	mylp->add_constraint(row,LEQ,0.0); // add the constraint of the objective function

	row[0] = 0.0;
	//The linear system is generated
	if (m>0)
	{
		// the evaluation of the constraints in the corner x_corner
		IntervalVector g_corner(sys.f_ctrs.eval_vector(x_corner));

		for (int i=0; i<m; i++) {

			if (entailed->normalized(i)) continue;
			//if (sys.f_ctrs[i].eval(box).ub()<=0) continue;      // the constraint is satified :)

			sys.ctrs[i].f.gradient(box,G);                     // gradient calculation

			for (int ii =0; ii< n ; ii++)
				if (G[ii].diam() > 1e8) {
					mylp->clean_ctrs();
					return false; //to avoid problems with SoPleX
				}

			//The contraints i is generated:
			// c_i:  inf([g_i]([x])) + sup(dg_i/dx_1) * xl_1 + ... + sup(dg_i/dx_n) * xl_n  <= -eps_error
			for (int j=0; j<n; j++) {

				if (corner[j])
					row[j+1]=G[j].ub();
				else
					row[j+1]=G[j].lb();
			}
			mylp->add_constraint(row,LEQ, (-g_corner)[i].lb()-mylp->get_epsilon());  //  1e-10 ???  BNE
			//mysoplex.addRow(LPRow(-infinity, row1, (-g_corner)[i].lb()-1e-10));    //  1e-10 ???  BNE
		}
	}


	//		mylp->writeFile("dump.lp");
	//		system ("cat dump.lp");

	LinearSolver::Status_Sol stat = mylp->solve();
	
	delete [] corner;
	//	std::cout << " stat " << stat << std::endl;
	if (stat == LinearSolver::OPTIMAL) {
		//the linear solution is mapped to intervals and evaluated
		Vector prim(n+1);
		mylp->get_primal_sol(prim);

		IntervalVector tmpbox(n);

		for (int j=0; j<n; j++)
		  tmpbox[j]=x_corner[j]+prim[j+1];
		//		std::cout << " simplex result " << tmpbox << std::endl;
		bool ret= box.contains(tmpbox.mid()) && check_candidate(tmpbox.mid(),false); //  [gch] do we know here that the point is inner??

		if (ret) {
		  if (trace)
		    {   int prec=std::cout.precision();
		    std::cout.precision(12);
			std::cout << "[simplex1]"  << " loup update " << pseudo_loup  << " loup point  " << loup_point << std::endl;
			std::cout.precision(prec);
		    }
			nb_simplex++;
			diam_simplex= ((nb_simplex-1) * diam_simplex + box.max_diam()) / nb_simplex;
		}

		return ret;
	}
	if (trace) {
		if(stat == LinearSolver::TIME_OUT) std::cout << "Simplex spent too much time" << std::endl;
		if(stat == LinearSolver::MAX_ITER) std::cout << "Simplex spent too many iterations" << std::endl<< box << std::endl;
	}
	return false;
 } catch (LPException&) {
	 return false;
 }
}



#endif //_IBEX_WITH_NOLP_
} // end namespace ibex
