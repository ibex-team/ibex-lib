//============================================================================
//                                  I B E X                                   
// File        : ibex_DefaultStrategy.cpp_
// Author      : Gilles Chabert
// Copyright   : Ecole des Mines de Nantes (France)
// License     : See the LICENSE file
// Created     : Jul 05, 2014
//============================================================================

#include "ibex_ExtendedSystem.h"
#include "ibex_Bsc.h"
#include "ibex_Ctc.h"
#include "ibex_CellBuffer.h"
#include "ibex_LinearRelax.h"

#include <vector>
#include <stdlib.h>

using namespace std;

namespace ibex {

namespace {

/**
 * This class is used to record the data created dynamically
 * by default strategies (DefaultSolver, DefaultOptimizer), to
 * ease disallocation.
 *
 * Typical data include contractors, a bisector, etc.
 */
class Memory {
public:
	std::vector<Ctc*> ctc;

	// The recorded systems can correspond to different things:
	// - default optimizer: the extended system as expected by Optimizer
	// - default solver: the sub-system of equations for Newton contractor
	// - optimizer (constructor with string[]) : system and extended system
	std::vector<System*> sys;

	Bsc* bsc;
	CellBuffer* buffer;
	LinearRelax* relax;

	Memory() : bsc(NULL), buffer(NULL), relax(NULL) {
		// A NULL pointer corresponds to unused data
	}

	~Memory() {
		for (vector<Ctc*>::iterator it=ctc.begin(); it!=ctc.end(); it++) {
			delete *it;
		}
		ctc.clear();

		if (bsc) delete bsc;
		if (buffer) delete buffer;
		if (relax) delete relax;
		// warning! LinearRelaxXTaylor uses system in its destructor.
		// delete it before systems.

		for (vector<System*>::iterator it=sys.begin(); it!=sys.end(); it++) {
			delete *it;
		}
		sys.clear();


	}

};

Memory** memory() { // construct-on-first-use idiom
	static Memory* memory=NULL;
	if (memory==NULL) memory=new Memory();
	return &memory;
}

Ctc& rec(Ctc* ptr) {
	(*memory())->ctc.push_back(ptr);
	return *ptr;
}

ExtendedSystem& rec(ExtendedSystem* ptr) {
	(*memory())->sys.push_back(ptr);
	return *ptr;
}

System& rec(System* ptr) {
	(*memory())->sys.push_back(ptr);
	return *ptr;
}

LinearRelax& rec(LinearRelax* ptr)       { return *((*memory())->relax = ptr); }
Bsc& rec(Bsc* ptr)                       { return *((*memory())->bsc = ptr); }
CellBuffer& rec(CellBuffer* ptr)         { return *((*memory())->buffer = ptr); }

} // end anonymous namespace

} // end namespace ibex
