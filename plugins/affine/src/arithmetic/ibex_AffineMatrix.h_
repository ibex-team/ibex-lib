/* ============================================================================
 * I B E X - ibex_Affine2MainMatrix<T>.cpp
 * ============================================================================
 * License     : This program can be distributed under the terms of the GNU LGPL.
 *               See the file COPYING.LESSER.
 *
 * Author(s)   : Jordan Ninin
 * Created     : March 16, 2013
 * ---------------------------------------------------------------------------- */

#ifndef __IBEX_AFFINE2_MATRIX_H2__
#define __IBEX_AFFINE2_MATRIX_H2__


#include "ibex_TemplateMatrix.h_"

namespace ibex {



template<class T>
AffineMainMatrix<T>::AffineMainMatrix() : _nb_rows(0), _nb_cols(0), _M(NULL) {

}

template<class T>
AffineMainMatrix<T>::AffineMainMatrix(int nb_rows1, int nb_cols1) : _nb_rows(nb_rows1), _nb_cols(nb_cols1) {
	assert(nb_rows1>0);
	assert(nb_cols1>0);

	_M = new AffineMainVector<T>[_nb_rows];
	for (int i=0; i<_nb_rows; i++) {
		_M[i].resize(_nb_cols);
	}
}

template<class T>
AffineMainMatrix<T>::AffineMainMatrix(int nb_rows1, int nb_cols1, const AffineMain<T>& x) : _nb_rows(nb_rows1), _nb_cols(nb_cols1) {
	assert(nb_rows1>0);
	assert(nb_cols1>0);

	_M = new AffineMainVector<T>[_nb_rows];
	for (int i=0; i<_nb_rows; i++) {
		_M[i].resize(_nb_cols);
		for (int j=0; j<_nb_cols; j++) _M[i]._vec[j]=x;
	}
}



template<class T>
AffineMainMatrix<T>::AffineMainMatrix(int m, int n, double bounds[][2]) : _nb_rows(m), _nb_cols(n) {
	assert(m>0);
	assert(n>0);
		int k=0; // counter for "bounds"
		_M = new AffineMainVector<T>[_nb_rows];
		for (int i=0; i<_nb_rows; i++) {
			_M[i].resize(_nb_cols);
			for (int j=0; j<_nb_cols; j++) {
				_M[i]._vec[j]=AffineMain<T>(Interval(bounds[k][0],bounds[k][1]));
				k++;
			}
		}
}

template<class T>
AffineMainMatrix<T>::AffineMainMatrix(const AffineMainMatrix<T>& m) : _nb_rows(m.nb_rows()), _nb_cols(m.nb_cols()){
	_M = new AffineMainVector<T>[_nb_rows];

	for (int i=0; i<_nb_rows; i++) {
		_M[i].resize(_nb_cols);
		for (int j=0; j<_nb_cols; j++) _M[i]._vec[j]=AffineMain<T>(m[i][j]);
	}

}


template<class T>
AffineMainMatrix<T>::AffineMainMatrix(const IntervalMatrix& m) : _nb_rows(m.nb_rows()), _nb_cols(m.nb_cols()){
	_M = new AffineMainVector<T>[_nb_rows];
	int k=0; // counter for "bounds"
	for (int i=0; i<_nb_rows; i++) {
		_M[i].resize(_nb_cols);
		for (int j=0; j<_nb_cols; j++)  {
			_M[i]._vec[j]=AffineMain<T>(m[i][j]);
			k++;
		}
	}
}


template<class T>
AffineMainMatrix<T>::AffineMainMatrix(const Matrix& m) : _nb_rows(m.nb_rows()), _nb_cols(m.nb_cols()){
	_M = new AffineMainVector<T>[_nb_rows];
	for (int i=0; i<_nb_rows; i++) {
		_M[i].resize(_nb_cols);
		for (int j=0; j<_nb_cols; j++) {
			_M[i]._vec[j]=AffineMain<T>(m[i][j]);
		}
	}
}

template<class T>
AffineMainMatrix<T>::~AffineMainMatrix() {
	if (_M!=NULL) delete[] _M;
}

template<class T>
AffineMainMatrix<T>& AffineMainMatrix<T>::operator=(const AffineMainMatrix<T>& x) {
	//resize(x.nb_rows(), x.nb_cols());
	return _assignM(*this,x);
}

template<class T>
AffineMainMatrix<T>& AffineMainMatrix<T>::operator=(const IntervalMatrix& x) {
	//resize(x.nb_rows(), x.nb_cols());
	return _assignM(*this,x);
}

template<class T>
IntervalMatrix AffineMainMatrix<T>::itv() const {
	assert(!is_empty());
	IntervalMatrix intm(nb_rows(),nb_cols());
	for (int i = 0; i < nb_rows(); i++) {
		for (int j =0; j < nb_cols();j++){
			intm[i][j] = (*this)[i][j].itv();
		}
	}
	return intm;
}


template<class T>
void AffineMainMatrix<T>::init(const AffineMain<T>& x) {
	for (int i=0; i<nb_rows(); i++)
		(*this)[i].init(x);
}

template<class T>
void AffineMainMatrix<T>::init(const Interval& x) {
	for (int i=0; i<nb_rows(); i++) {
		for (int j = 0; i < nb_cols(); i++) {
			(*this)[i][j] = AffineMain<T>(x);
		}
	}
}

template<class T>
bool AffineMainMatrix<T>::operator==(const AffineMainMatrix<T>& m) const {
	return _equalsM(*this,m);
}

template<class T>
bool AffineMainMatrix<T>::operator==(const IntervalMatrix& m) const {
	return _equalsM(*this,m);
}

template<class T>
void AffineMainMatrix<T>::resize(int nb_rows1, int nb_cols1) {
	assert(nb_rows1>0);
	assert(nb_cols1>0);
	assert((_M==NULL && _nb_rows==0) || (_nb_rows!=0 && _M!=NULL));

	if (nb_rows1==_nb_rows && nb_cols1==_nb_cols) return;

	AffineMainVector<T>* M2;

	if (nb_rows1!=_nb_rows)
		M2 = new AffineMainVector<T>[nb_rows1];
	else
		M2 = _M;

	for (int i=0; i<nb_rows1; i++) {
		M2[i].resize(nb_cols1);  // ALL_REALS by default
		if (i<_nb_rows) {
			int min_cols=nb_cols1<_nb_cols?nb_cols1:_nb_cols;
			for (int j=0; j<min_cols; j++)
				M2[i][j]=_M[i][j];
		}
	}

	if (_M!=NULL && nb_rows1!=_nb_rows) delete[] _M;

	_M = M2;
	_nb_rows = nb_rows1;
	_nb_cols = nb_cols1;
}

template<class T>
AffineMainMatrix<T> AffineMainMatrix<T>::submatrix(int row_start_index, int row_end_index,	int col_start_index, int col_end_index) {
	return _submatrix(*this,row_start_index,row_end_index,col_start_index,col_end_index);
}

template<class T>
AffineMainMatrix<T> AffineMainMatrix<T>::transpose() const {
	return _transpose(*this);
}

template<class T>
AffineMainVector<T> AffineMainMatrix<T>::col(int j) const {
//	return _col<Affine2MainMatrix<T>,Affine2MainVector<T> >(*this,j);
	{
		assert(!is_empty());
		assert(j>=0 && j<nb_cols());

		AffineMainVector<T> res(nb_rows());
		for (int i=0; i<nb_rows(); i++)
			res[i]=_M[i][j];
		return res;
	}
}

template<class T>
void AffineMainMatrix<T>::set_col(int col1, const AffineMainVector<T>& v) {
	_set_col(*this,col1,v);
}

template<class T>
AffineMainMatrix<T>& AffineMainMatrix<T>::inflate(double rad) {
	// see comment in Affine2MainVector<T>::inflate
	if (is_empty())
		return *this;

	Interval r(-rad, rad);
	for (int i = 0; i < nb_rows(); i++)
		for (int j = 0; j < nb_cols(); j++)
			(*this)[i][j] += r;
	return *this;
}

template<class T>
IntervalMatrix operator&(const AffineMainMatrix<T>& x, const AffineMainMatrix<T>& y) {
	assert(x.nb_rows()==y.nb_rows());
	assert(x.nb_cols()==y.nb_cols());

	if (y.is_empty()||x.is_empty())
		return IntervalMatrix::empty(x.nb_rows(),x.nb_cols());

	IntervalMatrix res(x.nb_rows(),x.nb_cols());
	for (int i=0; i<x.nb_rows(); i++) {
		res [i] = x[i] & y[i];
		if (res[i].is_empty()) {
			res.set_empty();
			return res;
		}
	}
	return res;
}

template<class T>
IntervalMatrix operator&(const AffineMainMatrix<T>& x, const IntervalMatrix& y) {
	assert(x.nb_rows()==y.nb_rows());
	assert(x.nb_cols()==y.nb_cols());

	if (y.is_empty()||x.is_empty())
		return IntervalMatrix::empty(x.nb_rows(),x.nb_cols());

	IntervalMatrix res(x.nb_rows(),x.nb_cols());
	for (int i=0; i<x.nb_rows(); i++) {
		res [i] = x[i] & y[i];
		if (res[i].is_empty()) {
			res.set_empty();
			return res;
		}
	}
	return res;
}

template<class T>
IntervalMatrix operator|(const AffineMainMatrix<T>& x,	const AffineMainMatrix<T>& y) {
	assert(x.nb_rows()==y.nb_rows());
	assert(x.nb_cols()==y.nb_cols());

	if (y.is_empty()&&x.is_empty())
		return IntervalMatrix::empty(x.nb_rows(),x.nb_cols());

	IntervalMatrix res(x.nb_rows(),x.nb_cols());
	for (int i=0; i<x.nb_rows(); i++) {
		res [i] = x[i] | y[i];
		if (res[i].is_empty()) {
			res.set_empty();
			return res;
		}
	}
	return res;
}

template<class T>
IntervalMatrix operator|(const AffineMainMatrix<T>& x,	const IntervalMatrix& y) {
	assert(x.nb_rows()==y.nb_rows());
	assert(x.nb_cols()==y.nb_cols());

	if (y.is_empty()&&x.is_empty())
		return IntervalMatrix::empty(x.nb_rows(),x.nb_cols());

	IntervalMatrix res(x.nb_rows(),x.nb_cols());
	for (int i=0; i<x.nb_rows(); i++) {
		res [i] = x[i] | y[i];
		if (res[i].is_empty()) {
			res.set_empty();
			return res;
		}
	}
	return res;
}


template<class T>
AffineMainMatrix<T> operator*(const AffineMain<T>& x, const Matrix& m) {
	if (x.is_empty()) {
		return AffineMainMatrix<T>::empty(m.nb_rows(),m.nb_cols());
	}
	AffineMainMatrix<T>  res(m.nb_rows(),m.nb_cols(),x);
	for (int i=0; i<m.nb_rows(); i++) {
		for (int j= 0;j<m.nb_cols();j++){
		res[i][j] *= m[i][j];
		}
	}
	return res;
}

template<class T>
AffineMainMatrix<T> operator*(const AffineMain<T>& x, const IntervalMatrix& m) {
	if (x.is_empty()||m.is_empty()) {
		return AffineMainMatrix<T>::empty(m.nb_rows(),m.nb_cols());
	}
	AffineMainMatrix<T>  res(m.nb_rows(),m.nb_cols(),x);
	for (int i=0; i<m.nb_rows(); i++) {
		for (int j= 0;j<m.nb_cols();j++){
		res[i][j] *= m[i][j];
		}
	}
	return res;
}

template<class T>
std::ostream& operator<<(std::ostream& os, const AffineMainMatrix<T>& m) {
	return _displayM(os, m);
}


} // namespace ibex



#endif // IBEX_AFFINE2_MATRIX_H2_

